{"version":3,"sources":["assets/icons/logo.svg","assets/icons/search.svg","Components/Device.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Components_Device","_ref","name","id","thumbnail","active","react_default","a","createElement","className","concat","src","width","height","alt","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sortDevicesByName","devices","sortedDevices","slice","sortOrder","state","sort","b","toLowerCase","reverse","setSortOrder","newSortOrder","setState","setGroupBy","newGroupBy","groupBy","filterByText","_this$state","filterText","visibleDevicesIds","filter","device","includes","map","deviceStatus","status","result","deviceNames","find","deviceName","deviceId","push","key","_this2","length","renderDevice","inactive","forEach","_this3","logo","type","placeholder","value","onChange","event","target","searchIcon","onClick","renderDevices","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b7929c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f22ad071.svg\";","module.exports = __webpack_public_path__ + \"static/media/search.a3ae3d1b.svg\";","import React from 'react';\nimport './Device.css'\n\nexport default ({ name, id, thumbnail, active }) => (\n  <div className={`device-card ${active ? '' : 'inactive-card'}`}>\n    <img src={thumbnail} width='50' height='50' alt= {name} />\n    <div className='card-description'>\n      <span className={`status-bar ${active ? ' active-bar' : 'inactive-bar'}`}></span>\n      <p>\n        <div className='status-text'>{active ? 'active' : 'inactive'}</div>\n        <div className='name-text'>{name}</div>\n      </p>\n      <div className='id-text'> Id #{id}</div>\n    </div>\n  </div>\n);\n","import React, { Component } from 'react';\nimport './App.css';\nimport logo from './assets/icons/logo.svg'\nimport searchIcon from './assets/icons/search.svg'\nimport Device from './Components/Device';\nimport deviceNames from './assets/json/sample-devices.json';\nimport deviceStatus from './assets/json/sample-status.json';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sortOrder: 'desc', // 'asc', 'desc'\n      groupBy: 'none', // 'none', 'status'\n      filterText: '',\n      devices: [],\n      visibleDevicesIds: [],\n    };\n  }\n\n  componentDidMount() {\n    const visibleDevicesIds = [];\n    const devices = deviceStatus.status.map((device) => {\n      const result = deviceNames.devices.find((deviceName) => {\n        return deviceName.id === device.deviceId\n      });\n      visibleDevicesIds.push(device.deviceId);\n      return {\n        id: device.deviceId,\n        active: !!device.active,\n        thumbnail: device.thumbnail,\n        name: (result && result.name) || '',\n      };\n    });\n\n      this.setState({ devices, visibleDevicesIds });\n    }\n\n\n    sortDevicesByName = (devices) => {\n      const sortedDevices = devices.slice();\n      const { sortOrder } = this.state;\n      sortedDevices.sort((a, b) => (a.name.toLowerCase() < b.name.toLowerCase()) ? 1 : -1);\n      if ( sortOrder === 'desc' ) {\n        sortedDevices.reverse();\n      }\n      return sortedDevices;\n    }\n\n    setSortOrder = () => {\n      const { sortOrder } = this.state;\n      let newSortOrder = '';\n\n      if (sortOrder === 'desc') {\n        newSortOrder = 'asc';\n      } else {\n        newSortOrder = 'desc';\n      }\n\n      this.setState({ sortOrder: newSortOrder });\n    }\n\n    setGroupBy = () => {\n      const { groupBy } = this.state;\n      let newGroupBy = '';\n      if (groupBy === 'status') {\n        newGroupBy = 'none';\n      } else {\n        newGroupBy = 'status';\n      }\n\n      this.setState({ groupBy: newGroupBy });\n    }\n\n    filterByText = () => {\n      const { filterText, devices } = this.state;\n      const filteredDevices = devices.filter((device) => {\n        return device.name.toLowerCase().includes(filterText.toLowerCase());\n      });\n      const visibleDevicesIds = filteredDevices.map((device) => device.id);\n      this.setState({ visibleDevicesIds });\n    }\n\n\n    renderDevice(device) {\n      return (\n        <Device\n          key={device.name + device.id}\n          name={device.name}\n          id={device.id}\n          thumbnail={device.thumbnail}\n          active={device.active}\n        />\n      );\n    }\n\n\n    renderDevices() {\n      const devices = this.state.visibleDevicesIds.map((id) => {\n        return this.state.devices.find((device) => {\n          return device.id === id;\n        });\n      });\n      const sortedDevices = this.sortDevicesByName(devices);\n      if (this.state.groupBy === 'none') {\n        return (\n          <div className='devices-gallery'>\n            <div className='group-title'>\n              <strong>All Devices</strong>\n              <span>({devices.length})</span>\n              <div className='group-division'></div>\n            </div>\n            <div className='devices-group'>{sortedDevices.map(this.renderDevice)}</div>\n          </div>\n        );\n      } else {\n        const active = [];\n        const inactive = [];\n        sortedDevices.forEach((device) => {\n          if (device.active) {\n            active.push(device);\n          } else {\n            inactive.push(device);\n          }\n        });\n        return (\n          [\n            <div className='devices-gallery'>\n              <div className='group-title'>\n                <strong>Active Devices</strong>\n                <span>({active.length})</span>\n                <div className='group-division'></div>\n              </div>\n              <div className='devices-group' key='active-devices'>{active.map(this.renderDevice)}</div>\n              <div className='group-title'>\n                <strong>Inactive Devices</strong>\n                <span>({inactive.length})</span>\n                <div className='group-division'></div>\n              </div>\n              <div className='devices-group' key='inactive-devices'>{inactive.map(this.renderDevice)}</div>\n            </div>\n          ]\n        )\n      }\n    }\n\n    render() {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <div className=\"header-logo\">\n              <img src={logo} alt='camera system logo' />\n            </div>\n          </header>\n          <div className='container'>\n            <div className='company-info'>\n              <h1> Your Cameras</h1>\n              <p>Total Devices: {this.state.devices.length}</p>\n            </div>\n            <div className='filters-group'>\n              <div className='search-filter'>\n              <input type='text' alt='search for devices' placeholder='Search by device name or ID ...' value={this.state.filterText} onChange={\n                (event) => {\n                  this.setState({ filterText: event.target.value }, () => {\n                    this.filterByText();\n                  });\n                }\n              } />\n            <div className='search-icon'>\n              <img src={searchIcon} alt='search icon'/>\n            </div>\n          </div>\n          <div className='toggle-filters'>\n            <span>Sort By Name <i className={this.state.sortOrder} onClick={() => this.setSortOrder() }/></span>\n            <span>Group By Status<i className={this.state.groupBy} onClick={() => this.setGroupBy() }/></span>\n          </div>\n        </div>\n          {this.renderDevices()}\n      </div>\n\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}